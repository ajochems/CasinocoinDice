package org.casinocoin.dice.model;

import java.security.SecureRandom;

import java.sql.Timestamp;

import java.util.Calendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.AttributeList;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.AttributeListImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.casinocoin.dice.model.common.SecretsView;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 25 14:47:22 CEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SecretsViewImpl extends ViewObjectImpl implements SecretsView {
    
    private static ADFLogger log = ADFLogger.createADFLogger(SecretsViewImpl.class);
    static final String seedChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    private String generateRandomString(int len){
        // create random hash
        SecureRandom random = new SecureRandom();
        StringBuilder sb = new StringBuilder(len);
        for( int i = 0; i < len; i++ ){ 
            sb.append(seedChars.charAt(random.nextInt(seedChars.length())));
        }
        return sb.toString();
    }
    
    /**
     * This is the default constructor (do not remove).
     */
    public SecretsViewImpl() {
    }

    /**
     * Returns the variable value for paramCheckDate.
     * @return variable value for paramCheckDate
     */
    public Timestamp getparamCheckDate() {
        return (Timestamp) ensureVariableManager().getVariableValue("paramCheckDate");
    }

    /**
     * Sets <code>value</code> for variable paramCheckDate.
     * @param value value to bind as paramCheckDate
     */
    public void setparamCheckDate(Timestamp value) {
        ensureVariableManager().setVariableValue("paramCheckDate", value);
    }
    
    public String getCurrentSecret(){
        // get current time
        Calendar cal=  Calendar.getInstance();
        // set date on query
        setparamCheckDate(new Timestamp(cal.getTimeInMillis()));
        setApplyViewCriteriaName("getCurrentSecret");
        executeQuery();
        if(hasNext()){
            Row secretRow = next();
            // check if secret is for today
            Calendar calToday=  Calendar.getInstance();
            // reset hour, minutes, seconds and millis to past midnight
            calToday.set(Calendar.HOUR_OF_DAY, 0);
            calToday.set(Calendar.MINUTE, 0);
            calToday.set(Calendar.SECOND, 0);
            calToday.set(Calendar.MILLISECOND, 0);
            log.info("Today midnight: " + calToday.getTimeInMillis() + " ValidFrom: " + 
                     ((Timestamp)secretRow.getAttribute("ValidFrom")).getTime());
            if(calToday.getTimeInMillis() > ((Timestamp)secretRow.getAttribute("ValidFrom")).getTime()){
                // secret is old, create new
                return createNewSecret();
            } else {
                return (String) secretRow.getAttribute("SecretHash");
            }
        } else {
            // no current secret so create a new one
            return createNewSecret();
        }
    }
    
    public Integer getCurrentSecretId(){
        // get current time
        Calendar cal=  Calendar.getInstance();
        // set date on query
        setparamCheckDate(new Timestamp(cal.getTimeInMillis()));
        setApplyViewCriteriaName("getCurrentSecret");
        executeQuery();
        Row secretRow = next();
        return (Integer) secretRow.getAttribute("Id");
    }
    
    private String createNewSecret(){
        // get current time
        Calendar cal=  Calendar.getInstance();
        // reset time to past midnight
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        // convert to Timestamp
        Timestamp newValidTime = new Timestamp(cal.getTimeInMillis());
        // invalidate all previous secrets
        setApplyViewCriteriaName("getAllValidSecrets");
        executeQuery();
        // loop over all valid rows
        for(Row secretRow : getAllRowsInRange()){
            Timestamp validFrom = (Timestamp)secretRow.getAttribute("ValidFrom");
            secretRow.setAttribute("ValidTo", newValidTime);
            secretRow.setAttribute("ValidFrom", validFrom);
            // save changes to database
            getApplicationModule().getTransaction().commit();
        }
        // generate a 32 length secret hash
        String secretHash = generateRandomString(32);
        log.info("New Secret: " + secretHash);
        // set all attributes
        AttributeList al = new AttributeListImpl();
        al.setAttribute("SecretHash", secretHash);
        al.setAttribute("ValidFrom", newValidTime);
        createAndInitRow(al);
        // save new secret to database
        getApplicationModule().getTransaction().commit();
        // return new secret
        return secretHash;
    }
}

